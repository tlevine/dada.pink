tags: ['dadawarehouse']
----------
# Surveilling people is harder than I had though

I've been collecting lots of data for the past ten years or so,
and I've recently been connecting those data in my
[dada warehouse](http://small.dada.pink/dadawarehouse/README).
I think I'll manage to do some of the things that I want to do
with it, but it is becoming clear that many of these things are
harder than I had hoped.

## Using an off-the-shelf data warehouse product
I originally thought I was going to do this with
[cubes](http://cubes.databrewery.org/), but then I couldn't get cubes
to work on even the examples that the documentation references.
Fortunately, it is free software, so I read through the code and
changed a few things and generally tried to understand how to use it,
but I eventually gave up.

Then I figured that I could use some other data warehouse thingies.
It turns out that that is even harder! First of all, you usually have
to figure out how to buy them, and that turns out to be *really* hard.
Some of them have free trials, so I tried those, but I didn't manage
to install any. I got hope when I saw [Saiku](http://meteorite.bi/saiku/)
because it is free software, but I didn't manage to install it either.

### Doeund
After spending two weeks trying to use off-the-shelf tools,
I eventually gave up and wrote my own thing. I call it
[doeund](http://small.dada.pink/dadawarehouse/doeund/)
(because I name things by
[banging on the keyboard](/!/dada/)).

Depending on how you measure time, I probably spent more time trying to get
the off-the-shelf tools working than I did writing doeund or writing the
importers for different data sources. But I think it was
worth it because studying the other tools gave me some understanding of what
data warehousing is about.

Anyway, here is how I use doeund.

I define my data model with specialized declarative SQLAlchemy classes.
Every table is either a `Fact` or a `Dimension`, and the only difference
is that facts are tables that I care about and dimensions are things that
I want to pretend are parts of fact tables. More precisely, doeund creates
a corresponding cube for each fact table but not for each dimension table.

What do I mean by a "cube"? Unfortunately, it is not really a cube because
I didn't want to make something that could run OLAP queries. Instead, it is
just a SQL view that applies lots of joins to denormalize the fact table.
(I specify a join with either of a foreign key constraints or a call to the
`add_join` method of a table.)

Hmm. Since these "cubes" isn't really a cubes, I think I'm going to start
calling them "cuboids".

There's also an `add_union` method. I use this for combining multiple tables
into one. For example, I use this to find all of the different names for one
person, as I get those names from many different sources and then convert them
to the same schema.

### Advantages and disadvantages of doeund
The cool part of all of this is that I feel like I'm specifying three things
at once. I write SQLAlchemy subclasses and wind up with the following things.

1. Schema of the core database, with all of the tables and constraints
2. Python classes that map to the database schema
3. Cuboid SQL view that makes it easier to query

While this is *almost* exactly what *I* want, it doesn't have all of the
awesome that I had hoped for. In particular, I really wanted to have a bubbly
graphical interface that would magically know which graphs are reasonable to
draw. But I don't have that, so I'm just going to query the database from R
and [make plots with ggplot2](/!/learn-plotting).

Here are some other things that could get annoying.

* Everything must be in a single relational database.
* You query it just like you would normally query that relational database;
    it doesn't have use OLAP queries.
* There would be some extra work if I wanted to write part of the system in
    language other than Python.

I could add support for these things, of course, but I want to get on with
analyzing the stuff that I have just spent weeks putting together.

And there's one more note that might apply to all software of this sort.
I'm finding it rather hard to test doeund and my whole dada warehouse.
I'm sending lots of data through it and am not in the mood to test all edge
cases. Also, much of the logic depends on a gigantic global variable called
the "database". And, most annoyingly, almost all of the data that I'm sending
through it are private, so it is hard for me to distribute example data.

## Surveillance that didn't work
Once I got this working well enough to be worth looking at what was in my
database, I found that surveilling people wasn't as easy as I had expected.
Well, it's more that there was a particular thing that I thought should be
really easy and wasn't.

### What I wanted to figure out
I have a hunch that people I know look at my website a lot more than I
realize. Here are some reasons for my hunch.

1. I can tell from various logs that people are looking at my website.
    (I'll say more on this in the next section.)
2. Recently, people whom I have just met act like they already know me,
    and I had been confused as to why. I think it's because they already
    *do* know me, because they have been reading my website.
3. People sometimes tell me that they've been reading my website, but
    they are normally shy about saying so.

I am always quite flattered when I learn that people read my website, but
they rarely tell me. Secondarily, I don't have a great feel for which parts
people like and why people like them.

I wanted to figure out which people were responsible for which visits to
pages to my website.

### Data sources
I have emails and logs of web visits, and I thought I could connect these
to each other.

First of all, people sometimes send me emails. I think you know how that
works.

Also, people sometimes look at my website. If they are running Javascript
and haven't asked to be blocked, my instance of [Piwik](http://piwik.org)
records a bunch of things about them. It also stores a cookie in the
person's browser so that it can tell when the same person went to the site
twice.

### Matching email addresses with web visits
I figured that I could use the dates and times of emails and web visits
to associate email addresses (and, in turn, people) with web visitors.

For example, consider than I may have recived two emails from the same
email address, one in the evening of September 2 and one in the morning
of September 24. Consider further that my website may have received visits
from a particular IP address or from a person with the same cookie on
at both of those times as well. Do these web visits and emails belong
to the same person?

A small detail: A separate part of the dada warehouse associates email
addresses with real people, so this can work even if they sent me emails
from different email addresses.

### Lots of web visitors look at the same page over and over




Do people actually browse like this? Like, does it mean that my article
is so amazing that people refer back to it? Or is it a bot? Or are my
logs bad?

### When I did manage to match visitors with people
There were situations where I did manage to match visitors to people
and where I knew that these people had looked at the website different
times. But when I looked in the Piwik data, I saw that their visitor
cookie and IP address were each associated with only one visit!
I have a few explanations for this.

1. They switch browsers or computers, so the visitor cookies don't help.
2. Their IP addresses changed. This is especially likely if they were reading
    from their phones or if they were using proxies.
3. They know what they're doing and have done something to disable the
    Piwik tracking.
4. My logs are bad.

### Connecting visitor cookies with IP addresses
Perhaps I need to branch out beyond the exact visitor cookie and IP address.
Maybe I can figure out which 

When someone visits the website from a particular IP address, I figure that
both the visitor cookie and the IP address have something to do with the
person. If I see the same visitor cookie with a different IP address or a
different visitor cookie from the same IP address, I can figure that there's
some connection.

If it's the same visitor cookie from different IP addresses, it might be that
the person is using his or her computer in a different place. The different
places might be home, office, cell phone, coffee shop, &c.

If it's a different visitor cookie from the same IP address, it might be
a different computer belonging to the same person or a different computer
belonging to a different person. In the latter case, it might be a roommate,
colleague, or fellow-hipster-in-a-coffee-shop.

This might sound very cool in theory, but
it seems that I'm the only person who looks at my website enough for this
to be helpful. Thus, the linking of different IP addresses with different
visitor cookies isn't making my surveillance of *other* people any easier.
That said, I'm learning a lot of interesting stuff about myself.

### Topics of emails of visited web pages
Perhaps we could go by the content of the emails. I might have referenced
a page on my website in an email, or someone else might have referenced a
page on my website in an email. Rather than relying on people visiting the
site twice and sending me an email twice, perhaps we could make the connection
in one email based on the content of the email? Well that's hard too.

You see, if I sent mentioned something on my website to someone, I have
probably mentioned it to a few people, so it's hard to say who is reading it.
Alternatively, if someone mentioned something on my website to me, it's
probably something that's *actually* worth reading, so even more people
are probably reading the link, and it is even harder to figure out who is who.

Perhaps I could get somewhere if I modeled the connenctions as probabilities.
But that's more work, and the point was just that I had expected this to be
really easy.

## Surveillance that did work
I neglected to discuss any of the things interesting/scary things that I
*did* discover by looking at the data. You see, the difficulty of surveilling
people was starting to frustrate me, so I decided to take a break from
programming and to write English about it instead. And I focused on all of
the frustrating things.

I skipped over all of the things that I *did* find, so surveillance might
still be much easier than *you* had expected. Also, there's a lot that I'm
learning about myself from these data, and that also means that you could
surveil me quite easily if you controlled enough of the computers that house
my data.
