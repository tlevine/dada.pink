The introductory R texts and courses that I see normally read a bit
differently from introductions to other languages.

Sometimes, such materials for other languages are intended for people
who are already familiar with programming languages. They are quite
concise, and they introduce the language by using jargon about programming
languages and by relating the language to other programming languages.

Other times, these materials are intended as an introduction to programming
through a particular programming language. They start out with elementary
language features, including the flow of the program, simple data structures,
and the relationship between the program and the computer hardware.

The introduction to R typically ignores that it is a programming language
and instead focuses on statistics. Some introductions teach people who
already know some statistics how to use R to run the statistics that they
know. Other introductions come alongside an introduction to statistics, so
they are introductions to statistics through R. This works well for people
who know something about statistics and nothing about programming, but it
can be especially confusing for people who already know something about
programming.

So I'm going to try teaching you about R like you might expect a programming
language to be introduced, by discussing some of its properties with
programming language terminology and by relating it to other languages.

## How to think about R
There are a lot of reasons why people make new languages, and understanding
these reasons can help you understand the languages. Before we start talking
about the specifics of the language, we need to understand why R is so
bizarre and why learning materials related to R might make absolutely no
sense to you.

Keep these three explosive statements about R in mind.

1. The thing about R is that it was designed by statisticians.
2. Everything in R is a complete hack.
3. People who use R only know how to use R.

I don't really know whether the above statements are true,
but R makes a lot of sense when you assume that they are.

### R was designed by statisticians
I don't know whether R really was designed by statisticians, (I also don't
quite know what I mean by "statisticians".) but it makes sense that we would
wind up with this language if it was designed by statisticians.
<!-- lolz frequentist language -->

R's terminology is totally bizarre. Here are some examples.

* The higher-order function that you would usually call `map` is instead
    called `apply`.
* There are `array` and `list` data structures in R, but they don't do what
    you think they do.

You can think of R as an end-user program, akin to Excel. The R interpreter
has a bunch of things that you might not expect of an interpreter.

* `help`
* `example`
* `data`

You can write a help and an example for anything that is exported from a
package or that comes with base R. For example, we can ask for help about
the normal random number generator

    help(rnorm)

and run some example random number generations.

    example(rnorm)

Instead of using random numbers, we could use one of the datasets.
If you package datasets in the R way and then load the package, they show
up when you run `data`.

`plot` and `summary` are some other methods that people typically
define for their classes.

### Everything in R is a complete hack
Again, I don't really know if everything in R is a complete hack, but
I don't see particularly strong evidence against that statement.

A common statement in R is to assign a value to the result of a function. 
As an example of this, let's look at the `rownames` function.

    > rownames(Formaldehyde)
    [1] "1" "2" "3" "4" "5" "6"
    > rownames(Formaldehyde)[3] <- 8 # R uses arrows for assignment.
    > rownames(Formaldehyde)
    [1] "1" "2" "8" "4" "5" "6"

This is slightly bizarre, but the thing that makes me consider it a complete
hack is the way this is implemented. I don't really understand how it works,
but it involves defining two functions, one called 'rownames' and another
called 'rownames<-'.

### R has connections to everything because people who use R only know how to use R.
Shiny is the best example of this; people who use R only know how
to use R, so when they want to write websites, they need their own
domain-specific templating language written in R.
(That said, there are good reasons to use Shiny too.)

Here is the `ui.R` file from the
[Telephones by region](http://shiny.rstudio.com/gallery/telephones-by-region.html)
Shiny demo application.

    library(shiny)

    # Rely on the 'WorldPhones' dataset in the datasets
    # package (which generally comes preloaded).
    library(datasets)

    # Define the overall UI
    shinyUI(
      
      # Use a fluid Bootstrap layout
      fluidPage(    
        
        # Give the page a title
        titlePanel("Telephones by region"),
        
        # Generate a row with a sidebar
        sidebarLayout(      
          
          # Define the sidebar with one input
          sidebarPanel(
            selectInput("region", "Region:", 
                        choices=colnames(WorldPhones)),
            hr(),
            helpText("Data from AT&T (1961) The World's Telephones.")
          ),
          
          # Create a spot for the barplot
          mainPanel(
            plotOutput("phonePlot")  
          )
          
        )
      )
    )

In other languages, people would probably write templates that look
mostly like HTML. But people who use R only know how to use R, so they
need a new domain-specific language written in R.

## Basics of the language

* Interpreted
* Largely written in C and Fortran
* A Lisp
* Functions usually don't have side-effects, but there's nothing to
    stop them from having side-effects.

### Types
R is dynamically typed, but there's a particular weird thing that you need
to know about. Lots of R involves matrix calculations, and R magically does
the right thing depending on what you pass. For example, let's start with
this vector.

    a <- 1:10

and see what happens when we add different things to it.

    a + 3
    a + (10:1)
    a + 1:2
    a + 1:8

So you should think of the dimensionality as a component of the type of
a thing in R.

### Primitive data structures are weird
R's most primitive data structures (or at least the most primitive ones that
I know about and would ever use) are very high-level.

A lot of times we work with numbers and text.

    > str(8)
    num 8
    > str('A string')
    chr "A string"

(`str` is the command for inspecting the structure of something. In other
languages, you might instead call this sort of command `type`.)

Sometimes we want to have several numbers inside of a container. We might
use a vector for this.

    a.vector <- c(8, 7, 6)

Vectors are kind of like the things you might call "arrays", but there's a
lot more to them. For example, you can assign string keys for each of the
values.

    names(a.vector) <- c('Apple', 'Orange', 'Watermelon')

Now, we can query this vector with both numeric and character indices.

    > a.vector
     Apple     Orange Watermelon 
         8          7          6
    > a.vector[1]
    Apple 
        8 
    > a.vector['Apple']
    Apple 
        8 

So an array is kind of like a mapping type as well. In fact, most R structures
are the same in this respect; they usually support both numerical and character
indexing.

### Factors
The factor is a special version of the numeric vector. 

    jelly.bean.vector <- c('blue', 'pink', 'yellow', 'pink', 'yellow', 'pink')
    jelly.bean.factor <- factor(jelly.bean.vector)

"Factor" is a statisticsy word; other languages might call this
an enumeration. Underneath, the factor is a bunch of integers with
"levels" that map integers to character values.

    as.numeric(jelly.bean.factor)
    # [1] 1 2 3 2 3 2
    levels(jelly.bean.factor)
    # [1] "blue"   "pink"   "yellow"

We can change the level values.

    levels(jelly.bean.factor)[1] <- 'violet'
    jelly.bean.factor
    # [1] violet  pink   yellow pink   yellow pink  
    # Levels: violet pink yellow

The levels have whatever order you gave them (alphabetical if you didn't
say it explicitly), so you can do this

    sort(jelly.bean.factor)
    # [1] violet pink   pink   pink   yellow yellow
    # Levels: violet pink yellow

### Data frames


### Counter-intuitive execution order
In other dynamic languages, the arguments of a function are evaluated before
the function is run with those arguments. This is what happens when we take
the absolute value of `3 - 5` in R.

    abs(3 - 5)

Some functions work differently. Let's consider `eval`. In JavaScript, you
might write this.

    12 == eval('var a = 4; a + 8')

In R, we don't provide a string of the expression-to-be-evaluated; instead,
we just provide the expression.

    12 == eval({a <- 4; a + 8})
    'a <- 4; a + 8' == eval('a <- 4; a + 8')

(The braces are just there to group the expressions; they are not specific to
`eval`.)

I think this behavior is implemented through meta-programming, so it's kind
of not part of the language. Except that it is part of the language.

## What it means when people say they "know R"
When someone says he or she knows R, it usually means that he or she knows
how to open a data file, fit whatever model he or she uses in his or her
work, and make a plot. For example, he or she might know how to do this.

    ChickWeight <- read.csv('ChickWeight.csv')
    plot(ChickWeight)
    fit <- lm(weight ~ Time + Diet, data = ChickWeight)
    print(summary(fit))
    plot(fit)

The script will be a bit different for different people; they'll know how to
import the particular data format that they work with, how to make the plots
that their peers like to see, how to fit the models that their field likes to
talk about, and how to do some sort of model diagnosis.

## Conventions, best practices, and notable syntax


### Dots
Sometimes, we want to put two words in the name of a function. Since we don't
like having spaces in function names, we might (in other languages) use
underscores or camel case.

    camelCase <- function() {}
    underscores_instead_of_spaces <- function() {}

In R, we use dots instead of spaces.

    dots.instead.of.spaces <- function() {}

Dots are just ordinary characters; they do not separate tokens in any way.

### Creating numeric vectors
The normal way of creating vectors is to concatenate vector elements.

    c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

The creation of numeric vectors is quite common, so there is a `seq` command
(like in many other languages).

    seq(1, 10)

And the creation of vectors of ascending or descending integers is so common
that there's a special operator for that

    1:10
    10:1
    10:1 == rev(1:10)

### Braces
We can group a bunch of expressions with a brace.

    2 == {3; 8; 2}

### Indexing

* Numeric and character
* Commas
* Starts at 1
* `$` and `@`

### Vectorization
R is really slow, but the parts written in C and Fortran are fast, so
it is good practice to "vectorize" your code. For example, this

    vec <- 1:100
    vec.2 <- vec + 1

is much faster than iterating through `vec` and adding 1 to each element.


## Cool language features

### Environments

### Formula syntax
Function syntax `y ~ x`

### Object orientation
There are three ways

S3 classes, S4 classes...

## Things nobody tells you
`sos::findFn`
