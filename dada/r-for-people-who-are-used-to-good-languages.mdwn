There are a lot of reasons why people make new languages, and understanding
these reasons can help you understand the languages. Here's how you should
think about R.

1. The thing about R is that it was designed by statisticians.
2. Everything in R is a complete hack.
3. People who use R only know how to use R.

I don't really know whether the above statements are true,
but R makes a lot of sense when you assume that they are.

## What it means when people say they "know R"
When someone says he or she knows R, it usually means that he or she knows
how to open a data file, fit whatever model he or she uses in his or her
work, and make a plot. For example, he or she might know how to do this.

    ChickWeight <- read.csv('ChickWeight.csv')
    plot(ChickWeight)
    fit <- lm(weight ~ Time + Diet, data = ChickWeight)
    print(summary(fit))
    plot(fit)

The script will be a bit different for different people; they'll know how to
import the particular data format that they work with, how to make the plots
that their peers like to see, how to fit the models that their field likes to
talk about, and how to do some sort of model diagnosis.

## Basics of the language

* Interpreted
* Largely written in C and Fortran
* A Lisp
* Functions usually don't have side-effects, but there's nothing to
    stop them from having side-effects.

### Some notation

* `1:10` is equivalent to `seq(1, 10)`
* dots in names rather than underscores
* Notation for indexing

### Types
R is dynamically typed, but there's a particular weird thing that you need
to know about. Lots of R involves matrix calculations, and R magically does
the right thing depending on what you pass. For example, let's start with
this vector.

    a <- 1:10

and see what happens when we add different things to it.

    a + 3
    a + (10:1)
    a + 1:2
    a + 1:8

So you should think of the dimensionality as a component of the type of
a thing in R.

### Primitive data structures
R's most primitive data structures (or at least the most primitive ones that
I know about and would ever use) are very high-level.

A lot of times we work with numbers and text.

    > str(8)
    num 8
    > str('A string')
    chr "A string"

(`str` is the command for inspecting the structure of something. In other
languages, you might instead call this sort of command `type`.)

Sometimes we want to have several numbers inside of a container. We might
use a vector for this.

    a.vector <- c(8, 7, 6)

Vectors are kind of like the things you might call "arrays", but there's a
lot more to them. For example, you can assign string keys for each of the
values.

    names(a.vector) <- c('Apple', 'Orange', 'Watermelon')

Now, we can query this vector with both numeric and character indices.

    > a.vector
     Apple     Orange Watermelon 
         8          7          6
    > a.vector[1]
    Apple 
        8 
    > a.vector['Apple']
    Apple 
        8 

So an array is kind of like a mapping type as well. In fact, most R structures
are the same in this respect; they usually support both numerical and character
indexing.

## Cool language features

### Environments

### Formula syntax

## Weird things


### R things have weird names.


### R has connections to everything because people who use R only know how to use R.
Shiny is the best example of this; people who use R only know how
to use R, so when they want to write websites, they need their own
domain-specific templating language written in R.
(That said, there are good reasons to use Shiny too.)









weird things

S3 classes, S4 classes


Weird names

* `apply`
* `list`

(And you should try not to use side effects as that can be confusing.)
R is really slow, but the parts written in C and Fortran are fast, so
it is good practice to "vectorize" your code. For example, this

    vec <- 1:100
    vec.2 <- vec + 1

is much faster than iterating through `vec` and adding 1 to each element.

`data` packaging

`?`

`sos::findFn`

Function syntax `y ~ x`

plotting
