title: Tom Computer School
description: I formalize my views on learning computer stuff.
--------------------------------------------------------

I want to run Tom's Computer School at your hackerspace or school or
wherever. Or maybe even over the internet, if we can't do in person.
Here's how it will work.

## How Tom thinks you should learn computers
I think you should do whatever you feel like and learn just enough
computer things as you need for that. Here is a
[related writing](/!/learn-programming-through/).
I can assist you at this by telling you what to learn and by
explaining things that you couldn't find elsewhere.

## Principles behind Tom School
I have planned the Tom School such that I can give people personalized
teaching without me working very hard. I think that students will learn things
more quickly and with less stress in this format than they would with more
common formats, but I didn't really try to make that happen.

When I talk to one person for more than a few seconds in the context
of teaching, my main goal is to come up with something to write about.
A secondary goal is teaching/advising/whatever the person, and I prefer
to accomplish that by referring the person to a piece of writing.
If such a piece of writing does not exist, I can write down something
that will explain whatever the person wants to know.
I find that improvised verbal explanations are usually horrendous wastes
of time, so I try to give up at them if they take more than about a
sentence. 

I seem to like [sleep](/!/sleeping/) more than other people do, and that
might have something to do with the plan that I put forth presently.

## Daily schedule
We'll gather in whatever place we gather in for a few hours each day.
The exact times don't matter that much to me. Let's say that the day
is from 10 am to 5 pm.

### Lectures
We will allocate 10 am to 11 am for talks, but they won't happen every day.
The topics of talks might have something to do with the questions that I get
in the ten-minute meetings that I haven't yet told you about.

### Mid-day break
We'll have a two-hour break from 12 pm to 2 pm for lunch and napping
and whatnot. At the beginning of this break, we'll have an optional game
where we can [run around and learn computer things](/!/real-world-algorithms/).
(We might also take one full day off of the normal schedule to play the games
that need to be played in a corn maze or a hilly area.)

### Meetings with individual students
Each student will have a meeting of ten minutes with me every day.
The student use this meeting to ask me questions.
Since it's only ten minutes per
day, students are better off finding answers in other places if they
can, like from websites, books, and videos. This meeting will be a bit
different on the first day, as I discuss [below](#firstday).

On all days other than the first day,
my responses to the questions I get during the meetings are likely to sound
like one of the following.

* Search the internet for a particular topic, (I'll tell you the topic that
    is relevant to your question.) and follow the directions that you get.
* Ask me something simpler so I don't have to think so hard.
* Here is a link to a web page that answers your question.
* I couldn't find anything on the internet that would answer your question
    easily, so I might eventually write something about it and send that to you.
* I will sit next to you as you debug your code, and I will tell you to read
    the error messages. (Error messages are scary, so you might not read them
    otherwise!)

Many of the things that I write that other people wind up reading come out
of meetings that went a bit like the meetings that I propose. The most formal
such meetings were those in the class on
[switching to command line](/!/switching-to-command-line/) that I gave
at [OpenLabs](http://openlabs.cc).

### End-of-day meeting
At the end of the day, we'll have a meeting where everyone verbally reports
what she or he did that day. Each report will be limited to five seconds.
If we have too many students for such a meeting, we'll do this in writing,
and the reports will be limited to something like one complex sentence,
two simple sentences, or 150 characters.

The end-of-day meeting is inspired by "stand-up" meetings. I quite enjoy such
meetings when the meeting doesn't run long. (But stand-up meetings always run
long if I'm not the one running them.)

<h3 id="firstday">First day</h3>
As mentioned above, the ten-minute meetings will run a bit differently on
the first day.

If you have an idea of a computer thing that you want to make or learn,
we will discuss that thing, and I will tell you which aspects to do/learn
first, based on your background and what you want to do.

If you don't have much of an idea, I will decide for you, based on your
background and on the things that you do day to day. It will probably be one
of the following.

* Use vim or emacs for something that you already do with other software.
* Use the shell for something that you already do without the shell.
* Configure and use a nice email client (pine, mh, mutt, &c.) or some related
    email thing, maybe for searching (notmuch), filtering (postfix, imapfilter, &c).
* Learn to copy files between computers.

My reasoning for these generic topics is
[here](http://thomaslevine.com/!/geeky-free-software-project/#peoplesharewithme).

Given how involved these discussions may get, I will probably be okay with
the first day's meetings running beyond ten minutes.

You can, of course, ask for this sort of advice later in the school; I am
just deciding that this what we're going to talk about on the first day.
