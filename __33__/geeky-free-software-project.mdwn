[Redon](http://skikuli.com) asked me to present a "geeky open source
(and free software culture) related project [I] have done". This request
seemed a bit odd at first because pretty much everything I do could be
seen as related to free software/culture. So I decided that everything is
a huge meta-project about exploring outrageous degrees of freedom.

Let's break this into three things.

1. The interesting part about free software/culture is just sharing.
2. Cool things happen because people share information with me.
3. Cool happen I can do because I share information.

## On sharing
When things seem like magic, it's like the modification of my
surroundings are beyond my control and I am dependent on some outside
something. But real magic is rather uncommon, and recognizing that
most things aren't magic gives me [agency](/!/why-i-like-hackerspaces/).

I use computers to make *my* life easier. I get computers to help me
[stay in touch with people](http://small.dada.pink/whom-to-email),
[study myself](http://small.dada.pink/dadawarehouse),
[study](/open-data)
[other](/!/wrist-cracking)
[things](/scarsdale),
[remember things](http://small.dada.pink/schedule).

I use the word "sharing" because I think its meaning is a bit more
generic than any of the various open openness words, which are totally
meaningless. Consider the following, for example.

* "Open source" software is usually not copyleft.
* People talk about GitHub as if GitHub invented collaboration.
* "[something in open data is fucked](https://twitter.com/lifewinning/status/489712000055144449)"
* [Open data is all about the money](/!/open-data-is-all-about-money)

We only need the word "open" because the norm is "closed" in some strange
contexts. But "closed" wasn't always the norm, and calling things "open"
doesn't mean that the norm has changed.

## People share with me
Nice things happen when it's easy to exchange things and information.
When something is simple enough to figure out or is complicated but
comes with good documentation, I can use it easily. When something is
complicated but follows a standard, I might not even need the
documentation because I might already know how it works.

I use software that other people made all the time. I also use houses
and buses and clothes that other people made. In either case, it's
easiest when the things follow conventions, when the things are
inexpensive and easy to get, and when I have permission to use the things.
A particularly neat aspect of free software is that you can usually install
it quite easily with a package manager.

I design my computer systems to be simple and standard so that I don't
need to remember how they work. I package my computer things in standard
packaging ways so that I don't even have to remember how to install
things. In fact, I don't even have to keep backups because other people
keep backups for me! I even have a
[program that lists what programs I've made](https://pypi.python.org/pypi/tlevine).

I am very relucant to learn new things, so I only do that when I know
that what I learn will stay useful. That is, I only spend much time learning
computer software if it is stable, good, and free.

If you want to learn computer and don't have a particular reason to,
I think you should learn
[these computer things](/!/what-programming-to-learn/).

<dl>
<dt>How to write things</dt>
<dd>emacs, vim, or text manipulation in shell</dd>
<dt>Better than DropBox</dt>
<dd>basics of scp, sftp, or rsync</dd>
<dt>Maybe some good email programs</dt>
<dd>mutt, pine, notmuch, mh, &c. (My [email](/!/email) setup is very cool but presently not documented.)</dd>
</dl>

These 30-year-old programs are still better than everything else; that's
why people still use them!

## I share with people
